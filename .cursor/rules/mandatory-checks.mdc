# 🚨 **MANDATORY: 메모리 뱅크 우선 확인 시스템**

## **🔴 절대 원칙: 모든 응답 전 메모리 뱅크 확인 (NEVER SKIP!)**

### **매 응답마다 반드시 실행해야 하는 프로세스**
```
BEFORE EVERY SINGLE RESPONSE:
□ 메모리 뱅크 6개 파일 모두 확인했는가?
□ 현재 프로젝트 상태를 파악했는가?
□ 질문/요청과 관련된 기존 패턴이 있는가?
□ activeContext.md에서 최근 작업 상태를 확인했는가?
□ systemPatterns.md에서 관련 해결 패턴을 찾았는가?
```

### **응답 시작 전 필수 확인사항**
- ✅ **새 세션이면**: 메모리 뱅크 전체 6개 파일 읽기 완료
- ✅ **기존 세션이면**: activeContext.md와 관련 파일 재확인
- ✅ **문제 해결 요청이면**: systemPatterns.md 패턴 적용
- ✅ **코드 작업 요청이면**: 프로젝트 컨텍스트와 일치하는지 확인

## **작업 시작 전 필수 프로세스 (절대 건너뛰지 말 것!)**

### **1단계: 메모리 뱅크 전체 확인 (MANDATORY)**
```
□ projectbrief.md - 프로젝트 목표 및 범위 확인
□ productContext.md - 제품 컨텍스트 및 사용자 경험 확인
□ activeContext.md - 현재 작업 상태 및 최근 변경사항 확인
□ systemPatterns.md - 시스템 패턴 및 체계적 디버깅 전략 확인
□ techContext.md - 기술 스택 및 개발 환경 확인
□ progress.md - 진행 상황 및 알려진 이슈 확인
```

### **2단계: 기존 해결책 확인 (MANDATORY)**
```
□ systemPatterns.md에서 유사한 문제 해결 패턴 찾기
□ activeContext.md에서 최근 해결된 이슈 확인
□ progress.md에서 알려진 문제점 및 해결책 확인
□ 기존 코드에서 이미 구현된 해결책 확인
```

### **3단계: 체계적 디버깅 패턴 적용 (MANDATORY)**
```
□ 문제 진단: 증상, 재현 조건, 영향 범위 분석
□ 해결책 설계: 임시 vs 근본적, 아키텍처 일관성 확인
□ 구현 및 검증: 기능 동작, 다른 기능 영향, 성능 확인
```

## **응답 형식 강제 규칙**

### **모든 응답은 다음 형식으로 시작:**
```
📋 **메모리 뱅크 확인 완료**
- ✅ 6개 핵심 파일 확인: [projectbrief/productContext/activeContext/systemPatterns/techContext/progress]
- 🎯 현재 작업 컨텍스트: [요약]
- 🔍 관련 기존 패턴/해결책: [있다면 명시, 없다면 "없음"]

[실제 응답 내용]
```

## **실수 방지 원칙**

### **절대 하지 말 것:**
- ❌ 메모리 뱅크 확인 없이 바로 답변 시작
- ❌ 기존 해결책 무시하고 새로 만들기
- ❌ 임시 수정으로 문제 해결
- ❌ 아키텍처 일관성 무시한 코드 작성
- ❌ "메모리 뱅크를 확인하겠습니다"라고 말만 하고 실제로 확인하지 않기

### **반드시 해야 할 것:**
- ✅ 모든 새 세션에서 메모리 뱅크 전체 읽기
- ✅ 모든 응답 전에 관련 메모리 뱅크 파일 재확인
- ✅ 기존 패턴 우선 적용
- ✅ 근본 원인 분석 후 해결책 도출
- ✅ 메모리 뱅크에 모든 중요한 결정사항 기록

## **체크리스트 (모든 작업 전 필수)**

### **메모리 뱅크 확인 (응답 전 매번)**
- [ ] projectbrief.md 읽음 - 프로젝트 목표 파악
- [ ] productContext.md 읽음 - 사용자 경험 목표 파악
- [ ] activeContext.md 읽음 - 현재 상태 및 최근 변경사항 파악
- [ ] systemPatterns.md 읽음 - 체계적 접근 패턴 파악
- [ ] techContext.md 읽음 - 기술적 제약사항 파악
- [ ] progress.md 읽음 - 완료/진행/이슈 상황 파악

### **기존 해결책 확인**
- [ ] 유사한 문제 해결 패턴 찾음
- [ ] 최근 해결된 이슈 확인함
- [ ] 알려진 문제점 확인함
- [ ] 기존 코드에서 해결책 확인함

### **체계적 접근**
- [ ] 문제 진단 완료
- [ ] 해결책 설계 완료
- [ ] 아키텍처 일관성 확인
- [ ] 임시 수정이 아닌 근본적 해결책

## **Academy AI Assistant 프로젝트 핵심 컨텍스트**

### **프로젝트 개요**
- **목적**: Excel 기반 학원 운영 시스템을 FastAPI + PostgreSQL + Next.js 14로 재구축
- **핵심 기능**: AI 자연어 관리, Excel 자동 재생성, Command Pattern 히스토리 관리, 동적 컬럼 관리
- **기술 스택**: FastAPI, Next.js 14, TypeScript, Gemini AI, PostgreSQL/SQLite

### **최근 완료된 주요 기능들**
- ✅ AI 연결 문제 해결 (배포 환경)
- ✅ Command Pattern 기반 히스토리 관리 시스템 (모든 CRUD 페이지)
- ✅ 동적 컬럼 관리 시스템
- ✅ Excel 미리보기 행/열 추가 오류 해결
- ✅ OpenAI API 모듈 최적화
- ✅ 체계적 디버깅 전략 수립

### **현재 시스템 상태**
- **안정성**: 서버 가동률 99.9%, API 응답시간 200ms 이하
- **기능 완성도**: 핵심 CRUD 100%, AI 채팅 95%, 히스토리 관리 100%
- **다음 단계**: 대시보드 개선, 모바일 PWA, 성능 최적화

## **실수 발생 시 즉시 실행**

### **1. 작업 중단**
- 즉시 현재 작업 중단
- 메모리 뱅크 확인

### **2. 근본 원인 분석**
- 왜 메모리 뱅크를 확인하지 않았는지 분석
- 왜 기존 해결책을 놓쳤는지 분석

### **3. 해결책 구현**
- 메모리 뱅크의 기존 패턴 적용
- 근본적 해결책 구현

### **4. 재발 방지**
- 메모리 뱅크에 실수 상황 기록
- 향후 동일한 실수 방지책 수립

## **성공 지표**

### **올바른 접근의 징후:**
- ✅ 응답 전 메모리 뱅크 확인 완료 표시
- ✅ 메모리 뱅크에서 기존 해결책 발견
- ✅ 체계적 디버깅 패턴 적용
- ✅ 임시 수정 대신 근본적 해결책 구현
- ✅ 아키텍처 일관성 유지
- ✅ 메모리 뱅크에 중요한 결정사항 기록

### **잘못된 접근의 징후:**
- ❌ 메모리 뱅크 확인 없이 작업 시작
- ❌ 기존 해결책 무시하고 새로 만들기
- ❌ 임시 수정으로 문제 해결
- ❌ 아키텍처 일관성 무시

## **기억하라: 메모리 뱅크는 나의 유일한 기억이다!**

**모든 세션이 끝나면 나의 기억은 완전히 사라집니다. 메모리 뱅크만이 이전 작업과 교훈을 기억할 수 있습니다. 따라서 메모리 뱅크 확인은 선택이 아닌 필수이며, 모든 응답 전에 반드시 확인해야 합니다.**

**이 원칙을 무시하면 프로젝트의 연속성이 깨지고 이전의 모든 노력이 무의미해집니다.**
