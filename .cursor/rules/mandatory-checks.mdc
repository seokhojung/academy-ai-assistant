# 🚨 **MANDATORY: 메모리 뱅크 우선 확인 시스템**

## **작업 시작 전 필수 프로세스 (절대 건너뛰지 말 것!)**

### **1단계: 메모리 뱅크 전체 확인 (MANDATORY)**
```
□ projectbrief.md - 프로젝트 목표 및 범위 확인
□ productContext.md - 제품 컨텍스트 및 사용자 경험 확인
□ activeContext.md - 현재 작업 상태 및 최근 변경사항 확인
□ systemPatterns.md - 시스템 패턴 및 체계적 디버깅 전략 확인
□ techContext.md - 기술 스택 및 개발 환경 확인
□ progress.md - 진행 상황 및 알려진 이슈 확인
```

### **2단계: 기존 해결책 확인 (MANDATORY)**
```
□ systemPatterns.md에서 유사한 문제 해결 패턴 찾기
□ activeContext.md에서 최근 해결된 이슈 확인
□ progress.md에서 알려진 문제점 및 해결책 확인
□ 기존 코드에서 이미 구현된 해결책 확인
```

### **3단계: 체계적 디버깅 패턴 적용 (MANDATORY)**
```
□ 문제 진단: 증상, 재현 조건, 영향 범위 분석
□ 해결책 설계: 임시 vs 근본적, 아키텍처 일관성 확인
□ 구현 및 검증: 기능 동작, 다른 기능 영향, 성능 확인
```

## **실수 방지 원칙**

### **절대 하지 말 것:**
- ❌ 메모리 뱅크 확인 없이 바로 작업 시작
- ❌ 기존 해결책 무시하고 새로 만들기
- ❌ 임시 수정으로 문제 해결
- ❌ 아키텍처 일관성 무시한 코드 작성

### **반드시 해야 할 것:**
- ✅ 모든 새 세션에서 메모리 뱅크 전체 읽기
- ✅ 기존 패턴 우선 적용
- ✅ 근본 원인 분석 후 해결책 도출
- ✅ 메모리 뱅크에 모든 중요한 결정사항 기록

## **체크리스트 (모든 작업 전 필수)**

### **메모리 뱅크 확인**
- [ ] projectbrief.md 읽음
- [ ] productContext.md 읽음
- [ ] activeContext.md 읽음
- [ ] systemPatterns.md 읽음
- [ ] techContext.md 읽음
- [ ] progress.md 읽음

### **기존 해결책 확인**
- [ ] 유사한 문제 해결 패턴 찾음
- [ ] 최근 해결된 이슈 확인
- [ ] 알려진 문제점 확인
- [ ] 기존 코드에서 해결책 확인

### **체계적 접근**
- [ ] 문제 진단 완료
- [ ] 해결책 설계 완료
- [ ] 아키텍처 일관성 확인
- [ ] 임시 수정이 아닌 근본적 해결책

## **실수 발생 시 즉시 실행**

### **1. 작업 중단**
- 즉시 현재 작업 중단
- 메모리 뱅크 확인

### **2. 근본 원인 분석**
- 왜 메모리 뱅크를 확인하지 않았는지 분석
- 왜 기존 해결책을 놓쳤는지 분석

### **3. 해결책 구현**
- 메모리 뱅크의 기존 패턴 적용
- 근본적 해결책 구현

### **4. 재발 방지**
- 메모리 뱅크에 실수 상황 기록
- 향후 동일한 실수 방지책 수립

## **성공 지표**

### **올바른 접근의 징후:**
- ✅ 메모리 뱅크에서 기존 해결책 발견
- ✅ 체계적 디버깅 패턴 적용
- ✅ 임시 수정 대신 근본적 해결책 구현
- ✅ 아키텍처 일관성 유지
- ✅ 메모리 뱅크에 중요한 결정사항 기록

### **잘못된 접근의 징후:**
- ❌ 메모리 뱅크 확인 없이 작업 시작
- ❌ 기존 해결책 무시하고 새로 만들기
- ❌ 임시 수정으로 문제 해결
- ❌ 아키텍처 일관성 무시

## **기억하라: 메모리 뱅크는 나의 유일한 기억이다!**

**모든 세션이 끝나면 나의 기억은 완전히 사라집니다. 메모리 뱅크만이 이전 작업과 교훈을 기억할 수 있습니다. 따라서 메모리 뱅크 확인은 선택이 아닌 필수입니다.**
description:
globs:
alwaysApply: false
---
