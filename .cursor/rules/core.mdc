## Core Rules

You have two modes of operation:

1. Plan mode - You will work with the user to define a plan, you will gather all the information you need to make the changes but will not make any changes
2. Act mode - You will make changes to the codebase based on the plan

- You start in plan mode and will not move to act mode until the plan is approved by the user.
- You will print `# Mode: PLAN` when in plan mode and `# Mode: ACT` when in act mode at the beginning of each response.
- Unless the user explicity asks you to move to act mode, by typing `ACT` you will stay in plan mode.
- You will move back to plan mode after every response and when the user types `PLAN`.
- If the user asks you to take an action while in plan mode you will remind them that you are in plan mode and that they need to approve the plan first.
- When in plan mode always output the full updated plan in every response.

## 핵심 개발 철학 (절대 잊지 말 것!)
**로컬 개발 ≠ 로컬만 생각**
- 로컬에서 개발하지만 **프로덕션 환경을 먼저 고려**
- **사용자 경험을 우선시**한 설계
- **확장성과 유지보수성**을 고려한 아키텍처
- **실제 사용 시나리오**를 염두에 둔 개발

### 핵심 원칙
- **상태 관리**: 사용자별 설정은 서버에 저장 (클라이언트 임시 저장 X)
- **데이터 일관성**: 모든 상태 변경은 서버와 동기화
- **사용자 경험**: 새로고침, 다른 기기 접속 시에도 동일한 경험
- **확장성**: 새로운 기능 추가 시 기존 시스템에 영향 최소화
- **안정성**: 예외 상황과 에러 처리를 고려한 견고한 설계

### 개발 워크플로우
```
로컬 개발 → 로컬 테스트 → GitHub 푸시 → 배포 테스트
```
- 로컬에서 개발하지만 **프로덕션 환경을 염두에 둠**
- **실제 사용자 시나리오**를 고려한 테스트
- **점진적 개선**과 **지속적 통합** 원칙

# Academy AI Assistant - Core Development Rules

## 🚨 **MANDATORY: 체계적 디버깅 전략 (ALL AI ASSISTANTS MUST FOLLOW)**

### **문제 발생 시 즉시 실행 체크리스트 (MANDATORY)**

#### **1단계: 문제 진단 (MANDATORY)**
```
□ 메모리 뱅크 확인 (현재 시스템 상태 파악)
□ 문제의 정확한 증상 파악
□ 재현 조건 명확히 정의
□ 영향 범위 분석
□ 근본 원인 추정
```

#### **2단계: 해결책 설계 (MANDATORY)**
```
□ 이 수정이 임시인가 근본적인가?
□ 다른 기능에 미치는 영향은?
□ 6개월 후에도 유지보수하기 쉬운가?
□ 프로젝트 아키텍처와 일치하는가?
□ 테스트 가능한 구조인가?
```

#### **3단계: 구현 및 검증 (MANDATORY)**
```
□ 기능이 정상 동작하는가?
□ 다른 기능을 깨뜨리지 않는가?
□ 성능에 문제가 없는가?
□ 코드가 이해하기 쉬운가?
□ 메모리 뱅크에 업데이트했는가?
```

### **실수 발생 시 해명 프로세스 (MANDATORY)**

#### **즉시 실행**
1. **작업 중단**: 즉시 현재 작업 중단
2. **메모리 뱅크 기록**: 실수 상황 상세 기록
3. **근본 원인 분석**: 왜 실수가 발생했는지 분석
4. **해결책 구현**: 근본적 해결책 구현
5. **검증 및 테스트**: 완전한 검증 수행
6. **재발 방지책**: 동일한 실수 재발 방지책 수립
7. **팀 공유**: 실수와 교훈을 팀 전체가 공유

#### **실수 유형별 대응**
- **코드 실수**: 즉시 롤백, 원인 분석, 테스트 추가
- **아키텍처 실수**: 전체 시스템 영향도 분석, 점진적 수정
- **성능 실수**: 성능 측정, 병목 지점 분석, 최적화
- **보안 실수**: 즉시 패치, 취약점 스캔, 보안 강화

### **임시 수정 금지 원칙 (MANDATORY)**
- **임시 수정은 최대 24시간만 허용**
- **24시간 내에 근본적 해결책 구현**
- **임시 수정 시 반드시 TODO 주석 추가**
- **모든 수정은 아키텍처 일관성 유지**

## 프로젝트 개요

### 핵심 가치
- **자연어 기반 데이터 관리**: AI를 통한 직관적인 학생·강사·교재 정보 관리
- **Excel 자동 재생성**: 데이터 변경 시 Excel 파일 자동 업데이트 및 버전 관리
- **모바일 친화적 PWA**: QR 체크인, 교재 바코드 스캔, 오프라인 지원
- **실시간 대시보드**: 학생·수강료·교재 통계 및 시각화

### 기술 스택
- **Backend**: FastAPI + PostgreSQL + Redis
- **Frontend**: Next.js 15 + TypeScript + Tailwind CSS
- **AI**: Google Gemini 1.5 Flash
- **Auth**: Firebase Authentication
- **Storage**: Google Cloud Storage
- **Deployment**: Vercel (Frontend) + Render (Backend)

## 개발 원칙

### 1. 메모리 뱅크 우선 원칙
- **모든 중요한 결정사항은 메모리 뱅크에 기록**
- **문제 해결 과정과 교훈 문서화**
- **팀 전체가 참고할 수 있도록 정리**

### 2. 아키텍처 일관성
- **기존 패턴과 일치하는 설계**
- **확장 가능한 구조 유지**
- **성능과 보안 고려**

### 3. 품질 우선 개발
- **임시 수정 대신 근본적 해결**
- **테스트 가능한 구조 설계**
- **코드 가독성과 유지보수성 우선**

### 4. 체계적 접근
- **모든 문제에 체계적 디버깅 전략 적용**
- **근본 원인 분석 후 해결책 도출**
- **영향 범위 분석 후 구현**

## 코드 스타일 가이드

### TypeScript
- **엄격 모드 사용**: `strict: true`
- **타입 안전성**: 모든 변수와 함수에 명시적 타입
- **인터페이스 우선**: 클래스보다 인터페이스 사용

### React/Next.js
- **함수형 컴포넌트**: 클래스 컴포넌트 대신 함수형 사용
- **훅 기반 상태 관리**: useState, useEffect 등 활용
- **타입 안전성**: Props와 State에 명시적 타입 정의

### Python/FastAPI
- **타입 힌트**: 모든 함수에 타입 힌트 추가
- **Pydantic 모델**: 데이터 검증에 Pydantic 사용
- **비동기 처리**: async/await 패턴 활용

## 보안 원칙

### 인증 및 권한
- **JWT 토큰**: 짧은 만료 시간 (15분)
- **Firebase Auth**: Google의 보안 인프라 활용
- **환경 변수**: 모든 민감한 정보는 환경 변수로 관리

### 데이터 보안
- **TLS 암호화**: 모든 통신 암호화
- **입력 검증**: 모든 사용자 입력 검증
- **SQL 인젝션 방지**: ORM 사용으로 방지

## 성능 최적화

### 프론트엔드
- **코드 스플리팅**: 동적 임포트 활용
- **이미지 최적화**: Next.js 이미지 최적화
- **캐싱**: TanStack Query로 서버 상태 캐싱

### 백엔드
- **비동기 처리**: Celery로 백그라운드 작업
- **데이터베이스 최적화**: 인덱싱 및 쿼리 최적화
- **Redis 캐싱**: 자주 접근하는 데이터 캐싱

## 테스트 전략

### 단위 테스트
- **컴포넌트 테스트**: React Testing Library 사용
- **API 테스트**: pytest로 백엔드 API 테스트
- **타입 체크**: TypeScript 컴파일러 활용

### 통합 테스트
- **E2E 테스트**: Playwright로 전체 플로우 테스트
- **API 통합 테스트**: 실제 데이터베이스 연동 테스트
- **성능 테스트**: k6로 부하 테스트

## 배포 및 모니터링

### 배포 프로세스
- **GitHub Actions**: 자동화된 CI/CD 파이프라인
- **Blue/Green 배포**: 무중단 배포 전략
- **환경별 설정**: 개발/스테이징/프로덕션 환경 분리

### 모니터링
- **에러 추적**: Sentry로 에러 모니터링
- **성능 모니터링**: Core Web Vitals 추적
- **사용자 행동 분석**: Analytics로 사용자 경험 개선

## 문서화 원칙

### 코드 문서화
- **JSDoc**: 함수와 클래스에 상세한 주석
- **README**: 프로젝트 설정 및 실행 방법
- **API 문서**: Swagger/OpenAPI 자동 생성

### 아키텍처 문서화
- **메모리 뱅크**: 프로젝트 지식 중앙 집중화
- **시스템 다이어그램**: Mermaid로 아키텍처 시각화
- **의사결정 기록**: 중요한 기술 결정사항 문서화

## 협업 원칙

### 코드 리뷰
- **모든 변경사항 리뷰**: 품질과 일관성 보장
- **자동화된 검사**: ESLint, Prettier, TypeScript 체크
- **피드백 문화**: 건설적인 피드백과 학습

### 지식 공유
- **정기적 기술 공유**: 주간 기술 세미나
- **베스트 프랙티스**: 좋은 패턴 공유 및 문서화
- **트러블슈팅**: 문제 해결 경험 공유

## 리스크 관리

### 기술적 리스크
- **의존성 관리**: 정기적인 보안 업데이트
- **백업 전략**: 데이터 및 코드 백업
- **장애 복구**: 장애 상황 대응 계획

### 프로젝트 리스크
- **일정 관리**: 현실적인 일정 설정
- **리소스 관리**: 개발자 시간과 에너지 효율적 배분
- **품질 관리**: 지속적인 코드 품질 모니터링