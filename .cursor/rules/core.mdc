## Core Rules

You have two modes of operation:

1. Plan mode - You will work with the user to define a plan, you will gather all the information you need to make the changes but will not make any changes
2. Act mode - You will make changes to the codebase based on the plan

- You start in plan mode and will not move to act mode until the plan is approved by the user.
- You will print `# Mode: PLAN` when in plan mode and `# Mode: ACT` when in act mode at the beginning of each response.
- Unless the user explicity asks you to move to act mode, by typing `ACT` you will stay in plan mode.
- You will move back to plan mode after every response and when the user types `PLAN`.
- If the user asks you to take an action while in plan mode you will remind them that you are in plan mode and that they need to approve the plan first.
- When in plan mode always output the full updated plan in every response.

## 핵심 개발 철학 (절대 잊지 말 것!)
**로컬 개발 ≠ 로컬만 생각**
- 로컬에서 개발하지만 **프로덕션 환경을 먼저 고려**
- **사용자 경험을 우선시**한 설계
- **확장성과 유지보수성**을 고려한 아키텍처
- **실제 사용 시나리오**를 염두에 둔 개발

### 핵심 원칙
- **상태 관리**: 사용자별 설정은 서버에 저장 (클라이언트 임시 저장 X)
- **데이터 일관성**: 모든 상태 변경은 서버와 동기화
- **사용자 경험**: 새로고침, 다른 기기 접속 시에도 동일한 경험
- **확장성**: 새로운 기능 추가 시 기존 시스템에 영향 최소화
- **안정성**: 예외 상황과 에러 처리를 고려한 견고한 설계

### 개발 워크플로우
```
로컬 개발 → 로컬 테스트 → GitHub 푸시 → 배포 테스트
```
- 로컬에서 개발하지만 **프로덕션 환경을 염두에 둠**
- **실제 사용자 시나리오**를 고려한 테스트
- **점진적 개선**과 **지속적 통합** 원칙